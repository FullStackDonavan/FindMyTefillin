generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

//datasource db {
//  provider = "mysql"
//  url      = env("DATABASE_URL")
//}

datasource db {
  provider  = "postgresql"
  url       = env("fmt_PRISMA_URL")
  directUrl = env("fmt_URL_NON_POOLING")
}

enum TefillinStatus {
  unclaimed
  lost
  found
  foundButLost
}

model User {
  id                   Int                  @id @default(autoincrement())
  loginType            String?              @default("email")
  password             String?
  email                String?              @unique
  firstName            String?
  lastName             String?
  username             String?              @unique
  phone                String?              @unique
  
  avatar               String? // Field for storing avatar URL
  session              Session[]
  stripeCustomerId     String?
  order                Order[]
  posts                Post[]

  photos               Photo[] // Define the relationship with the Photo model
  lostTefillinReports  LostTefillinReport[]
  registeredTefillin   RegisteredTefillin[]
  foundPosts           FoundPost[]
}

model RegisteredTefillin {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  idTag       String   @unique
  qrAttached  Boolean
  description String?
  photoUrl    String?
  status      String   @default("active")
  createdAt   DateTime @default(now())

  lostReports LostTefillinReport[] @relation("TefillinReports") 
  foundPosts  FoundPost[]
}

model FoundPost {
  id                         Int      @id @default(autoincrement())
  userId                     Int
  user                       User     @relation(fields: [userId], references: [id])
  idTag                      String
  location                   String
  photoUrl                   String?
  matchedRegisteredTefillinId Int?   
  matchedRegisteredTefillin  RegisteredTefillin? @relation(fields: [matchedRegisteredTefillinId], references: [id])
  status                     TefillinStatus @default(unclaimed)
  createdAt                  DateTime @default(now())
}


model Session {
  id        Int       @id @default(autoincrement())
  authToken String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Post {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  type           String // Type of post: 'text', 'video', 'meme', etc.
  content        Json // Store content data (e.g., video details for video posts)
  createdAt      DateTime @default(now())

  photos    Photo[] // Relation to Photo model
}

model LostTefillinReport {
  id                   Int                 @id @default(autoincrement())
  userId               Int
  user                 User                @relation(fields: [userId], references: [id])
  registeredTefillinId Int?
  registeredTefillin   RegisteredTefillin? @relation("TefillinReports", fields: [registeredTefillinId], references: [id]) // ðŸ‘ˆ Add relation name

  idTag          String
  registered     Boolean
  qrAttached     Boolean
  firstName      String
  lastName       String
  phone          String
  alternatePhone String?
  email          String
  location       String
  photoUrl       String?
  createdAt      DateTime @default(now())
}





model Photo {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int? // Optional: Link to Post
  url       String?  @db.Text
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id]) // Optional relation to a post
}


model Order {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  status      String    @default("pending") // pending, paid, shipped, cancelled, etc.
  totalAmount Float
  
  // Shipping info stored as fields for easy querying
  shippingName    String
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingPhone   String
  shippingEmail   String
  
  // Optional: Stripe payment session or intent ID for tracking payment
  stripeSessionId String? @unique
  stripePaymentIntentId String? @unique
  
  items OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int
  
  description String
  quantity    Int
  unitPrice   Float   // price per unit, store at order time for consistency
  
  // Optional: link to product id if you have a products table
  // productId Int?
  // product Product? @relation(fields: [productId], references: [id])
}


